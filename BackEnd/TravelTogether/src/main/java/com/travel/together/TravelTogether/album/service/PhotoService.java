package com.travel.together.TravelTogether.album.service;

import com.drew.imaging.ImageMetadataReader;
import com.drew.lang.GeoLocation;
import com.drew.metadata.Metadata;
import com.drew.metadata.exif.ExifSubIFDDirectory;
import com.drew.metadata.exif.GpsDirectory;
import com.travel.together.TravelTogether.album.dto.PhotoRequestDto;
import com.travel.together.TravelTogether.album.dto.PhotoResponseDto;
import com.travel.together.TravelTogether.album.entity.Photo;
import com.travel.together.TravelTogether.album.entity.PhotoAlbum;
import com.travel.together.TravelTogether.album.entity.PhotoPlace;
import com.travel.together.TravelTogether.album.repository.PhotoAlbumRepository;
import com.travel.together.TravelTogether.album.repository.PhotoRepository;
import com.travel.together.TravelTogether.album.repository.PhotoPlaceRepository;
import com.travel.together.TravelTogether.auth.entity.User;
import com.travel.together.TravelTogether.auth.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.boot.model.naming.IllegalIdentifierException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.Date;

@Slf4j
@Service
public class PhotoService {

    private final PhotoRepository photoRepository;
    private final PhotoAlbumRepository photoAlbumRepository;
    private final PhotoPlaceRepository photoPlaceRepository; // üìå PhotoPlaceRepository Ï∂îÍ∞Ä
    private final UserRepository userRepository;
    private final S3Service s3Service;

    // S3 ÏóÖÎ°úÎìúÎ•º ÏúÑÌïú ÏùòÏ°¥ÏÑ± Ï£ºÏûÖ
    public PhotoService(PhotoRepository photoRepository,
                        PhotoAlbumRepository photoAlbumRepository,
                        PhotoPlaceRepository photoPlaceRepository,
                        UserRepository userRepository,
                        S3Service s3Service) {
        this.photoRepository = photoRepository;
        this.photoAlbumRepository = photoAlbumRepository;
        this.photoPlaceRepository = photoPlaceRepository;
        this.userRepository = userRepository;
        this.s3Service = s3Service;
    }


    // ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú Î∞è S3 Ï†ÄÏû• ÌõÑ DB Ï†ÄÏû•
    @Transactional
    public PhotoResponseDto uploadPhoto(PhotoRequestDto photoRequestDto, MultipartFile file) {
        // ÌååÏùº Ï†ÑÏ≤¥ Î∞îÏù¥Ìä∏ Î∞∞Ïó¥ ÏùΩÍ∏∞ (Ïû¨ÏÇ¨Ïö©ÏùÑ ÏúÑÌï¥)
        byte[] fileBytes;
        try {
            fileBytes = file.getBytes();
        } catch (IOException e) {
            throw new RuntimeException("ÌååÏùº Î∞îÏù¥Ìä∏ ÏùΩÍ∏∞ Ïã§Ìå®", e);
        }

        // EXIF Ï†ïÎ≥¥ ÌååÏã±
        Float latitude = null;
        Float longitude = null;
        LocalDateTime takenAt = null;
        try (ByteArrayInputStream exifInputStream = new ByteArrayInputStream(fileBytes)) {
            Metadata metadata = ImageMetadataReader.readMetadata(exifInputStream);

            // GPS Ï†ïÎ≥¥
            GpsDirectory gpsDirectory = metadata.getFirstDirectoryOfType(GpsDirectory.class);
            if (gpsDirectory != null) {
                GeoLocation geoLocation = gpsDirectory.getGeoLocation();
                if (geoLocation != null && !Double.isNaN(geoLocation.getLatitude()) && !Double.isNaN(geoLocation.getLongitude())) {
                    latitude = (float) geoLocation.getLatitude();
                    longitude = (float) geoLocation.getLongitude();
                }
            }

            // Ï¥¨ÏòÅ ÏùºÏãú
            ExifSubIFDDirectory exifDirectory = metadata.getFirstDirectoryOfType(ExifSubIFDDirectory.class);
            if (exifDirectory != null) {
                Date originalDate = exifDirectory.getDateOriginal();
                if (originalDate != null) {
                    takenAt = originalDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                }
            }
        } catch (Exception e) {
            System.err.println("EXIF ÌååÏã± Ïã§Ìå®: " + e.getMessage());
        }

        // S3 ÏóÖÎ°úÎìú ÌõÑ URL Ï†ÄÏû•
        String s3Url;
        try (ByteArrayInputStream uploadStream = new ByteArrayInputStream(fileBytes)) {
            s3Url = s3Service.uploadFile(uploadStream, file.getSize(), file.getContentType(), file.getOriginalFilename());
        } catch (IOException e) {
            throw new RuntimeException("S3 ÏóÖÎ°úÎìú Ï§ë ÏóêÎü¨ Î∞úÏÉù", e);
        }

        // EXIF Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏúºÎ©¥ DTO Í∞í ÏÇ¨Ïö©
        photoRequestDto.setLatitude(latitude != null ? latitude : photoRequestDto.getLatitude());
        photoRequestDto.setLongitude(longitude != null ? longitude : photoRequestDto.getLongitude());
        photoRequestDto.setTakenAt(takenAt != null ? takenAt.toString() : photoRequestDto.getTakenAt());
        photoRequestDto.setFilePath(s3Url); // ‚úÖ S3 URLÏùÑ filePathÎ°ú ÏÑ§Ï†ï

        // ÏÉàÎ°ú ÎßåÎì† `savePhoto` Î©îÏÑúÎìúÎ•º ÏÇ¨Ïö©Ìï¥ DB Ï†ÄÏû•
        return savePhoto(photoRequestDto);
    }

    // Ïù¥ÎØ∏ S3Ïóê Ï†ÄÏû•Îêú ÏÇ¨ÏßÑÏùÑ DBÏóê Ï†ÄÏû•ÌïòÎäî Î©îÏÑúÎìú
    @Transactional
    public PhotoResponseDto savePhoto(PhotoRequestDto photoRequestDto) {
        // Ïï®Î≤î Ï†ïÎ≥¥ Ï°∞Ìöå
        PhotoAlbum album = photoAlbumRepository.findById(photoRequestDto.getAlbumId())
                .orElseThrow(() -> new RuntimeException("PhotoAlbum not found with id: " + photoRequestDto.getAlbumId()));

        // Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
        User user = userRepository.findById(photoRequestDto.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found with id: " + photoRequestDto.getUserId()));

        // place(Ïû•ÏÜå) Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú PhotoPlace Ï°∞Ìöå ÎòêÎäî ÏÉùÏÑ±
        PhotoPlace photoPlace = photoPlaceRepository.findByNameAndAlbum(photoRequestDto.getPlace(), album)
                .orElseGet(() -> {
                    PhotoPlace newPlace = new PhotoPlace();
                    newPlace.setAlbum(album);
                    newPlace.setName(photoRequestDto.getPlace()); // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Î≥¥ÎÇ∏ place Í∞í Ï†ÄÏû•
                    return photoPlaceRepository.save(newPlace);
                });


        // Photo ÏóîÌã∞Ìã∞ ÏÉùÏÑ± Î∞è ÌïÑÎìú ÏÑ§Ï†ï
        Photo photo = new Photo();
        photo.setAlbum(album);
        photo.setPhotoPlace(photoPlace);
        photo.setUser(user);
        photo.setFilePath(photoRequestDto.getFilePath());
        photo.setLatitude(photoRequestDto.getLatitude());
        photo.setLongitude(photoRequestDto.getLongitude());

        // Ï¥¨ÏòÅ ÎÇ†Ïßú ÏÑ§Ï†ï
        if (photoRequestDto.getTakenAt() != null && !photoRequestDto.getTakenAt().isEmpty()) {
            photo.setTakenAt(LocalDateTime.parse(photoRequestDto.getTakenAt(), DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        }

        // DB Ï†ÄÏû•
        Photo savedPhoto = photoRepository.save(photo);

        // Response DTO Î≥ÄÌôò
        PhotoResponseDto responseDto = new PhotoResponseDto();
        responseDto.setAlbumId(savedPhoto.getAlbum().getId());
        responseDto.setPhotoId(savedPhoto.getId());
        responseDto.setUserId(savedPhoto.getUser().getId());
        responseDto.setLatitude(savedPhoto.getLatitude());
        responseDto.setLongitude(savedPhoto.getLongitude());
        responseDto.setFilePath(savedPhoto.getFilePath());
        responseDto.setTakenAt(savedPhoto.getTakenAt() != null ? savedPhoto.getTakenAt().toString() : null);
        responseDto.setPlace(savedPhoto.getPhotoPlace().getName());

        return responseDto;
    }

   // Ïï®Î≤î ÏÇ¨ÏßÑ Ï°∞Ìöå
    @Transactional(readOnly = true)
    public List<PhotoResponseDto> getPhotosByAlbumId(int albumId) {
        List<Photo> photos = photoRepository.findByAlbumId(albumId);
        return photos.stream().map(photo -> {
            PhotoResponseDto dto = new PhotoResponseDto();
            dto.setAlbumId(photo.getAlbum().getId());
            dto.setPhotoId(photo.getId());
            dto.setUserId(photo.getUser().getId());
            dto.setLatitude(photo.getLatitude());
            dto.setLongitude(photo.getLongitude());
            dto.setFilePath(photo.getFilePath());
            dto.setTakenAt(photo.getTakenAt() != null ? photo.getTakenAt().toString() : null);
            dto.setPlace(photo.getPhotoPlace().getName());
            return dto;
        }).collect(Collectors.toList());
    }

    @Transactional
    public boolean deletePhoto(int albumId, Integer photoId, Long userId) {
        Photo photo = photoRepository.findById(photoId)
                .orElseThrow(() -> new IllegalArgumentException("Photo not found"));
        log.info("photoUser : {}", photo.getUser().getId());
        log.info("UserId : {}", userId);

        if (!photo.getUser().getId().equals(userId.intValue())) {
            throw new RuntimeException("User not authorized to delete this photo");
        }

        int albumIdFromPhoto = (photo.getAlbum() != null) ? photo.getAlbum().getId() : -1;
        if (albumIdFromPhoto != albumId) {
//            throw new IllegalArgumentException("Photo does not belong to the album");
            return false;
        }

        // 1. S3ÏóêÏÑú ÏÇ¨ÏßÑ ÏÇ≠Ï†ú
        String fileKey = extractFileKeyFromUrl(photo.getFilePath()); // URLÏóêÏÑú ÌååÏùº ÌÇ§ Ï∂îÏ∂ú
        s3Service.deleteFile(fileKey);

        // 2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÏÇ≠Ï†ú
        photoRepository.delete(photo);

        return true;
    }

    private String extractFileKeyFromUrl(String imageUrl) {
        return imageUrl.substring(imageUrl.lastIndexOf("/") + 1); // S3 URLÏóêÏÑú ÌÇ§ Ï∂îÏ∂ú
    }
}
